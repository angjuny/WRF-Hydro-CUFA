MODULE MODULE_BCHEAD_YSON
	USE MODULE_HYDRO_IO, ONLY: NREADRT2D_INT, NREADRT2D_REAL

	IMPLICIT NONE

	INTEGER :: BCHSWITCH = 1
	INTEGER :: BCHINITFLAG = 0, BCHREADFLAG = 0, BCHUPDATEFLAG = 0
	CHARACTER(LEN = 19) :: BCHDATE1 = '0000-00-00_00:00:00', BCHDATE2 = '0000-00-00_00:00:00'
	CHARACTER(LEN = :), ALLOCATABLE :: BCHFLNM1, BCHFLNM2
	INTEGER, ALLOCATABLE, DIMENSION(:,:) :: BCHEADMASK1, BCHEADMASK2
	REAL(KIND = 4), ALLOCATABLE, DIMENSION(:,:) :: BCHEAD1, BCHEAD2

	CONTAINS

	SUBROUTINE INIT_BCHEAD_YSON(IFLNM1, IFLNM2)
		IMPLICIT NONE
		CHARACTER(LEN = *), INTENT(IN) :: IFLNM1, IFLNM2
		LOGICAL :: IFLNM1OK, IFLNM2OK
		
		IF(BCHINITFLAG .EQ. 0) THEN
			ALLOCATE(CHARACTER(LEN = LEN(TRIM(IFLNM1))) :: BCHFLNM1)
			ALLOCATE(CHARACTER(LEN = LEN(TRIM(IFLNM2))) :: BCHFLNM2)
			BCHINITFLAG = 1
		END IF
		
		INQUIRE(FILE = TRIM(IFLNM1), EXIST = IFLNM1OK)
		INQUIRE(FILE = TRIM(IFLNM2), EXIST = IFLNM2OK)

		IF(IFLNM1OK) THEN
			BCHFLNM1(:) = TRIM(IFLNM1)
			BCHFLNM2(:) = TRIM(IFLNM1)
		END IF
		IF(IFLNM2OK) BCHFLNM2(:) = TRIM(IFLNM2)
		
		BCHUPDATEFLAG = 0
	END SUBROUTINE INIT_BCHEAD_YSON
	
	SUBROUTINE READ_BCHEAD_YSON(IXRT, JXRT)
		IMPLICIT NONE
		INTEGER, INTENT(IN) :: IXRT, JXRT
		
		INTEGER, ALLOCATABLE, DIMENSION(:,:) :: THEADMASK
		REAL(KIND = 4), ALLOCATABLE, DIMENSION(:,:) :: THEAD
		
		IF(BCHINITFLAG .NE. 1) RETURN
		IF(BCHUPDATEFLAG .EQ. 1) RETURN
		
		IF(BCHREADFLAG .EQ. 0) THEN
			ALLOCATE(BCHEADMASK1(IXRT, JXRT), BCHEADMASK2(IXRT, JXRT))
			ALLOCATE(BCHEAD1(IXRT, JXRT), BCHEAD2(IXRT, JXRT))
			BCHREADFLAG = 1
		END IF
		ALLOCATE(THEADMASK(IXRT, JXRT))
		ALLOCATE(THEAD(IXRT, JXRT))
		
		CALL NREADRT2D_INT("HEADMASK", THEADMASK, IXRT, JXRT, BCHFLNM1)
		BCHEADMASK1(:,:) = THEADMASK(:,:)
		CALL NREADRT2D_INT("HEADMASK", THEADMASK, IXRT, JXRT, BCHFLNM2)
		BCHEADMASK2(:,:) = THEADMASK(:,:)
		CALL NREADRT2D_REAL("HEAD", THEAD, IXRT, JXRT, BCHFLNM1)
		BCHEAD1(:,:) = THEAD(:,:)
		CALL NREADRT2D_REAL("HEAD", THEAD, IXRT, JXRT, BCHFLNM2)
		BCHEAD2(:,:) = THEAD(:,:)

		DEALLOCATE(THEADMASK)
		DEALLOCATE(THEAD)

		BCHUPDATEFLAG = 1
	END SUBROUTINE READ_BCHEAD_YSON

	SUBROUTINE INTP_BCHEAD_YSON(IXRT, JXRT, INTPFACTOR, IOHEAD)
		IMPLICIT NONE
		INTEGER, INTENT(IN) :: IXRT, JXRT
		REAL(KIND = 4), INTENT(IN) :: INTPFACTOR
		REAL(KIND = 4), INTENT(INOUT), DIMENSION(IXRT, JXRT) :: IOHEAD
		
		IF(BCHUPDATEFLAG .NE. 1) RETURN

		WHERE(BCHEADMASK1 .NE. 0 .AND. BCHEADMASK2 .NE. 0)
			IOHEAD = BCHEAD1 * (1.D0 - INTPFACTOR) + BCHEAD2 * INTPFACTOR
		END WHERE
	END SUBROUTINE INTP_BCHEAD_YSON

	SUBROUTINE UPDATE_SMC_YSON(IXRT, JXRT, NSOIL, ISMCMAX, IOSMC)
		IMPLICIT NONE
		INTEGER, INTENT(IN) :: IXRT, JXRT, NSOIL
		REAL(KIND = 4), INTENT(IN), DIMENSION(IXRT, JXRT, NSOIL) :: ISMCMAX
		!REAL(KIND = 4), INTENT(INOUT), DIMENSION(IXRT, JXRT, NSOIL) :: ISMCMAX
		REAL(KIND = 4), INTENT(INOUT), DIMENSION(IXRT, JXRT, NSOIL) :: IOSMC
		
		INTEGER :: K
		REAL(KIND = 4), ALLOCATABLE, DIMENSION(:,:) :: TSMCMAX, TSMC
		
		IF(BCHUPDATEFLAG .NE. 1) RETURN
		
		ALLOCATE(TSMCMAX(IXRT, JXRT), TSMC(IXRT, JXRT))
		DO K = 1,NSOIL
			TSMCMAX(:,:) = ISMCMAX(:,:,K)
			TSMC(:,:) = IOSMC(:,:,K)
			
			WHERE(BCHEADMASK1 .NE. 0 .AND. BCHEAD1 .GT. 0.0)
				!TSMCMAX = 1.D0
				TSMC = TSMCMAX
			END WHERE
			
			!ISMCMAX(:,:,K) = TSMCMAX(:,:)
			IOSMC(:,:,K) = TSMC(:,:)
		END DO
		DEALLOCATE(TSMCMAX, TSMC)
	END SUBROUTINE UPDATE_SMC_YSON

	SUBROUTINE END_BCHEAD_YSON()
		IMPLICIT NONE
		
		IF(BCHINITFLAG .EQ. 1) DEALLOCATE(BCHFLNM1, BCHFLNM2)
		IF(BCHREADFLAG .EQ. 1) DEALLOCATE(BCHEADMASK1, BCHEADMASK2, BCHEAD1, BCHEAD2)
	END SUBROUTINE END_BCHEAD_YSON
	
END MODULE MODULE_BCHEAD_YSON