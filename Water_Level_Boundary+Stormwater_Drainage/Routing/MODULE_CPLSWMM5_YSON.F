MODULE MODULE_CPLSWMM5_YSON
    USE ISO_C_BINDING, ONLY : C_CHAR, C_INT, C_FLOAT
    USE MODULE_HYDRO_IO, ONLY: NREADRT2D_INT
    USE NETCDF
#ifdef MPP_LAND
    USE MPI
    USE MODULE_MPP_LAND, ONLY: MY_ID, IO_ID, NUMPROCS
    USE MODULE_CPL_LAND, ONLY: HYDRO_COMM_WORLD
#endif
    IMPLICIT NONE

    INTEGER :: S5SWITCH = 1, S5OUTPUTCOUNT = 0
    REAL(KIND = 4) :: S5TIMELENGTH = 60.0
    REAL(KIND = 4) :: S5ELEVOFFSET = -1.5
    INTEGER :: S5NUMPROCS = 1
    
    INTEGER :: S5COUNT = 0
    INTEGER :: S5INITFLAG = 0, S5MATCHFLAG = 0, S5RUNFLAG = 0
    CHARACTER(LEN = 19) :: S5DATE1 = '0000-00-00_00:00:00', S5DATE2 = '0000-00-00_00:00:00'
    INTEGER :: S5NNODELAYER = 1
    INTEGER, ALLOCATABLE, DIMENSION(:,:,:) :: S5NODEMASK, S5NODEINDEX
    REAL(KIND = 4), ALLOCATABLE, DIMENSION(:,:) :: S5OSTAGETS
    INTEGER, PARAMETER :: S5UNITINP = 881, S5UNITRPT = 882, S5UNITHSF = 883, S5UNITTS = 884, S5UNITPART = 888, S5UNITTMP = 889
    CHARACTER(LEN = 30) :: S5DIR = 'CPL_SWMM5', S5PARTDIR = 'CPL_SWMM5/00000', S5FLNM = 'CPL_SWMM5'
    
    CHARACTER(KIND = C_CHAR, LEN = 15) :: S5FSTAMPX = "SWMM5-HOTSTART4"
    INTEGER(KIND = C_INT) :: S5NSUBCATCH = 0, S5NLANDUSES = 0, S5NNODES = 0, S5NLINKS = 0, S5NPOLLUT = 0, S5FLOWUNITS = 3
    INTEGER(KIND = C_INT) :: S5NJUNCTIONS = 0, S5NOUTFALLS = 0, S5NCONDUITS = 0
    REAL(KIND = C_FLOAT) :: S5TIMESTEP = 5.0
    REAL(KIND = C_FLOAT), PARAMETER :: S5FT2M = 0.3048, S5CFS2CMS = 0.02832

    LOGICAL :: S5PARTRUNCPU = .FALSE.
    INTEGER :: S5PARTNNODES = 0, S5PARTNLINKS = 0
    INTEGER :: S5PARTNJUNCTIONS = 0, S5PARTNOUTFALLS = 0, S5PARTNCONDUITS = 0
    INTEGER, ALLOCATABLE, DIMENSION(:) :: S5ALLNODECPUIDX, S5ALLLINKCPUIDX
    INTEGER, ALLOCATABLE, DIMENSION(:) :: S5PARTNODEIDX, S5PARTLINKIDX
	INTEGER, ALLOCATABLE, DIMENSION(:) :: S5PARTOFLLINKIDX
    INTEGER :: NTCHAR = 0
    CHARACTER(LEN = 10 * (16 + 1)), ALLOCATABLE :: TCHAR(:)
    
    TYPE TS5NODE
        INTEGER :: NWRFHID = 0
        INTEGER, DIMENSION(4) :: WRFHID, WRFHIDXX, WRFHIDXY
        REAL(KIND = 4) :: WRFHHEAD = 0.0, OUTFLOWS = 0.0
        CHARACTER(KIND = C_CHAR, LEN = 16) :: INPNODENAME = ''
        REAL(KIND = C_FLOAT) :: INPJELEV = 0.0, INPJMAXD = 0.0, INPJINITD = 0.0, INPJSURD = 0.0, INPJPONDA = 100.0
        REAL(KIND = C_FLOAT) :: INPOELEV = 0.0
        CHARACTER(KIND = C_CHAR, LEN = 10) :: INPOTYPE = ''
        CHARACTER(KIND = C_CHAR, LEN = 16) :: INPOSTAGE = ''
        CHARACTER(KIND = C_CHAR, LEN = 8) :: INPOGATE = ''
        REAL(KIND = C_FLOAT) :: INPINFLOWS = 0.0
        REAL(KIND = C_FLOAT) :: HSFDEPTH = 0.0, HSFLATFLOW = 0.0 ! US UNIT SYSTEM: FEET AND CFS
    END TYPE TS5NODE

    TYPE TS5LINK
        INTEGER :: INPCNODEIDX1 = 0, INPCNODEIDX2 = 0
        CHARACTER(KIND = C_CHAR, LEN = 16) :: INPLINKNAME = ''
        CHARACTER(KIND = C_CHAR, LEN = 16) :: INPCNODE1 = '', INPCNODE2 = ''
        REAL(KIND = C_FLOAT) :: INPCLENGTH = 0.0, INPCROUGH = 0.0, INPCOFFSET1 = 0.0, INPCOFFSET2 = 0.0, INPCINITQ = 0.0, INPCMAXQ = 0.0
        CHARACTER(KIND = C_CHAR, LEN = 12) :: INPXSHAPE = ''
        REAL(KIND = C_FLOAT) :: INPXGEOM1 = 0.0, INPXGEOM2 = 0.0, INPXGEOM3 = 0.0, INPXGEOM4 = 0.0
		INTEGER(KIND = C_INT) :: INPXBARR = 0, INPXCULV = 0
        REAL(KIND = C_FLOAT) :: HSFFLOW = 0.0, HSFDEPTH = 0.0, HSFSETTING = 1.0  ! US UNIT SYSTEM: FEET AND CFS
    END TYPE TS5LINK

    TYPE(TS5NODE), ALLOCATABLE, DIMENSION(:) :: S5NODE
    TYPE(TS5LINK), ALLOCATABLE, DIMENSION(:) :: S5LINK

    CONTAINS
    
    SUBROUTINE INIT_CPLSWMM5_YSON()
        IMPLICIT NONE
        INTEGER, DIMENSION(2) :: IJUNCTIONS, IOUTFALLS, ICONDUITS, IXSECTIONS
        INTEGER :: ERR, I, J, K, L, KJ, KO, KC, KX
        CHARACTER(LEN = 150) :: LINE
        CHARACTER(LEN = 16) :: TCHAR16
        
        S5COUNT = 0
        
        IF(S5INITFLAG .EQ. 1) RETURN

        OPEN(UNIT = S5UNITINP, FILE = './'//TRIM(S5DIR)//'/'//TRIM(S5FLNM)//'.INPFORM', FORM = 'FORMATTED', ACTION = 'READ', ACCESS = 'SEQUENTIAL', STATUS = 'OLD', IOSTAT = ERR)
        IF(ERR .NE. 0) STOP 'PLEASE CHECK IF .INPFORM EXISTS'
        
        I = 0
        IJUNCTIONS(:) = 0; IOUTFALLS(:) = 0; ICONDUITS(:) = 0; IXSECTIONS(:) = 0
        DO
            I = I + 1
            READ(S5UNITINP, '(A)', IOSTAT = ERR) LINE
            IF(ERR .NE. 0) EXIT
            
            IF(TRIM(LINE) .EQ. '[JUNCTIONS]') THEN
                IJUNCTIONS(1) = I
                DO
                    I = I + 1
                    READ(S5UNITINP, '(A)') LINE
                    IF(LINE(:2) .EQ. ';;') CYCLE
                    IF(TRIM(LINE) .EQ. '') THEN
                        IJUNCTIONS(2) = I; EXIT
                    END IF
                    S5NJUNCTIONS = S5NJUNCTIONS + 1
                END DO
            ELSE IF(TRIM(LINE) .EQ. '[OUTFALLS]') THEN
                IOUTFALLS(1) = I
                DO
                    I = I + 1
                    READ(S5UNITINP, '(A)') LINE
                    IF(LINE(:2) .EQ. ';;') CYCLE
                    IF(TRIM(LINE) .EQ. '') THEN
                        IOUTFALLS(2) = I; EXIT
                    END IF
                    S5NOUTFALLS = S5NOUTFALLS + 1
                END DO
            ELSE IF(TRIM(LINE) .EQ. '[CONDUITS]') THEN
                ICONDUITS(1) = I
                DO
                    I = I + 1
                    READ(S5UNITINP, '(A)') LINE
                    IF(LINE(:2) .EQ. ';;') CYCLE
                    IF(TRIM(LINE) .EQ. '') THEN
                        ICONDUITS(2) = I; EXIT
                    END IF
                    S5NCONDUITS = S5NCONDUITS + 1
                END DO
            ELSE IF(TRIM(LINE) .EQ. '[XSECTIONS]') THEN
                IXSECTIONS(1) = I
                DO
                    I = I + 1
                    READ(S5UNITINP, '(A)') LINE
                    IF(LINE(:2) .EQ. ';;') CYCLE
                    IF(TRIM(LINE) .EQ. '') THEN
                        IXSECTIONS(2) = I; EXIT
                    END IF
                END DO
            END IF
        END DO
        S5NNODES = S5NJUNCTIONS + S5NOUTFALLS
        S5NLINKS = S5NCONDUITS
        ALLOCATE(S5NODE(S5NNODES), S5LINK(S5NLINKS))
        DO J = 1,S5NNODES
            S5NODE(J)%WRFHID(:) = -1
            S5NODE(J)%WRFHIDXX(:) = 0
            S5NODE(J)%WRFHIDXY(:) = 0
        END DO
        ALLOCATE(S5ALLNODECPUIDX(S5NNODES), S5ALLLINKCPUIDX(S5NLINKS))
        S5ALLNODECPUIDX(:) = 0; S5ALLLINKCPUIDX(:) = 0
        S5INITFLAG = 1

        REWIND(S5UNITINP)
        KJ = 0; KO = S5NJUNCTIONS; KC = 0; KX = 0
        DO J = 1,I
            READ(S5UNITINP, '(A)', IOSTAT = ERR) LINE
            IF(ERR .NE. 0) EXIT
            IF(LINE(:2) .EQ. ';;') CYCLE
            IF(IJUNCTIONS(1) .LT. J .AND. J .LT. IJUNCTIONS(2)) THEN
                BACKSPACE(S5UNITINP); KJ = KJ + 1
                READ(S5UNITINP, *) S5NODE(KJ)%INPNODENAME, S5NODE(KJ)%INPJELEV, S5NODE(KJ)%INPJMAXD, S5NODE(KJ)%INPJINITD, S5NODE(KJ)%INPJSURD, S5NODE(KJ)%INPJPONDA
            ELSE IF(IOUTFALLS(1) .LT. J .AND. J .LT. IOUTFALLS(2)) THEN
                BACKSPACE(S5UNITINP); KO = KO + 1
                READ(S5UNITINP, *) S5NODE(KO)%INPNODENAME, S5NODE(KO)%INPOELEV, S5NODE(KO)%INPOTYPE, S5NODE(KO)%INPOSTAGE, S5NODE(KO)%INPOGATE
            ELSE IF(ICONDUITS(1) .LT. J .AND. J .LT. ICONDUITS(2)) THEN
                BACKSPACE(S5UNITINP); KC = KC + 1
                READ(S5UNITINP, *) S5LINK(KC)%INPLINKNAME, S5LINK(KC)%INPCNODE1, S5LINK(KC)%INPCNODE2, S5LINK(KC)%INPCLENGTH, S5LINK(KC)%INPCROUGH, S5LINK(KC)%INPCOFFSET1, S5LINK(KC)%INPCOFFSET2, S5LINK(KC)%INPCINITQ, S5LINK(KC)%INPCMAXQ
            ELSE IF(IXSECTIONS(1) .LT. J .AND. J .LT. IXSECTIONS(2)) THEN
                BACKSPACE(S5UNITINP); KX = KX + 1
                READ(S5UNITINP, '(A)') LINE
                LINE = ADJUSTL(TRIM(LINE))
                DO K = 1,8
                    DO L = 1,LEN(LINE)
                        IF(LEN(ADJUSTL(TRIM(LINE(:L)))) .EQ. LEN(ADJUSTL(TRIM(LINE(:L+1))))) EXIT
                    END DO
                    IF(K .EQ. 1) THEN
                        READ(LINE(:L), '(A)') TCHAR16
                    ELSE IF(K .EQ. 2) THEN
                        READ(LINE(:L), '(A)') S5LINK(KX)%INPXSHAPE
                    ELSE IF(K .EQ. 3) THEN
                        READ(LINE(:L), '(F10.5)') S5LINK(KX)%INPXGEOM1
                    ELSE IF(K .EQ. 4) THEN
                        READ(LINE(:L), '(F10.5)') S5LINK(KX)%INPXGEOM2
                    ELSE IF(K .EQ. 5) THEN
                        READ(LINE(:L), '(F10.5)') S5LINK(KX)%INPXGEOM3
                    ELSE IF(K .EQ. 6) THEN
                        READ(LINE(:L), '(F10.5)') S5LINK(KX)%INPXGEOM4
                    ELSE IF(K .EQ. 7) THEN
                        READ(LINE(:L), '(I3)') S5LINK(KX)%INPXBARR
                    ELSE IF(K .EQ. 8) THEN
                        READ(LINE(:L), '(I3)') S5LINK(KX)%INPXCULV
                    END IF
                    LINE = ADJUSTL(TRIM(LINE(L+1:)))
                    IF(ADJUSTL(TRIM(LINE)) .EQ. '') EXIT
                END DO
                IF(TRIM(S5LINK(KX)%INPLINKNAME) .NE. TRIM(TCHAR16)) STOP 'PLEASE CHECK THE NAME/ORDER OF INPUTS FOR [XSECTIONS]'
            ELSE IF(TRIM(LINE(:21)) .EQ. 'ROUTING_STEP') THEN
                READ(LINE(SCAN(LINE, ':', .TRUE.)+1:), '(F2.0)') S5TIMESTEP
            END IF
        END DO
        CLOSE(S5UNITINP)

        DO I = 1,S5NLINKS
            DO J = 1,S5NNODES
                IF(ADJUSTL(TRIM(S5LINK(I)%INPCNODE1)) .EQ. ADJUSTL(TRIM(S5NODE(J)%INPNODENAME))) S5LINK(I)%INPCNODEIDX1 = J
                IF(ADJUSTL(TRIM(S5LINK(I)%INPCNODE2)) .EQ. ADJUSTL(TRIM(S5NODE(J)%INPNODENAME))) S5LINK(I)%INPCNODEIDX2 = J
                IF(S5LINK(I)%INPCNODEIDX1 .GT. 0 .AND. S5LINK(I)%INPCNODEIDX2 .GT. 0) EXIT
            END DO
        END DO

        CALL PARTITION_CPLSWMM5_YSON()
    END SUBROUTINE INIT_CPLSWMM5_YSON

    SUBROUTINE PARTITION_CPLSWMM5_YSON()
        IMPLICIT NONE
        LOGICAL :: OKLOG
        INTEGER, DIMENSION(2) :: IJUNCTIONS, IOUTFALLS, ICONDUITS
        INTEGER :: ERR, I, J, K, KJ, KO, KC
        INTEGER, DIMENSION(S5NNODES) :: TALLNODECPUIDX
        INTEGER, DIMENSION(S5NLINKS) :: TALLLINKCPUIDX
        CHARACTER(LEN = 150) :: LINE
        CHARACTER(LEN = 16) :: TCHAR16
        
        IF(S5INITFLAG .NE. 1) RETURN

        WRITE(TCHAR16, '(I5.5)') MY_ID
        S5PARTDIR = TRIM(S5DIR)//'/'//ADJUSTL(TRIM(TCHAR16))
        INQUIRE(FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.INPFORM', EXIST = S5PARTRUNCPU)
#ifdef MPP_LAND
        IF(S5PARTRUNCPU) THEN
#endif
        OPEN(UNIT = S5UNITPART, FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.INPFORM', FORM = 'FORMATTED', ACTION = 'READ', ACCESS = 'SEQUENTIAL', STATUS = 'OLD', IOSTAT = ERR)
        IF(ERR .NE. 0) STOP 'PLEASE CHECK IF .INPFORM EXISTS'
        
        I = 0
        IJUNCTIONS(:) = 0; IOUTFALLS(:) = 0; ICONDUITS(:) = 0
        DO
            I = I + 1
            READ(S5UNITPART, '(A)', IOSTAT = ERR) LINE
            IF(ERR .NE. 0) EXIT
            
            IF(TRIM(LINE) .EQ. '[JUNCTIONS]') THEN
                IJUNCTIONS(1) = I
                DO
                    I = I + 1
                    READ(S5UNITPART, '(A)') LINE
                    IF(LINE(:2) .EQ. ';;') CYCLE
                    IF(TRIM(LINE) .EQ. '') THEN
                        IJUNCTIONS(2) = I; EXIT
                    END IF
                    S5PARTNJUNCTIONS = S5PARTNJUNCTIONS + 1
                END DO
            ELSE IF(TRIM(LINE) .EQ. '[OUTFALLS]') THEN
                IOUTFALLS(1) = I
                DO
                    I = I + 1
                    READ(S5UNITPART, '(A)') LINE
                    IF(LINE(:2) .EQ. ';;') CYCLE
                    IF(TRIM(LINE) .EQ. '') THEN
                        IOUTFALLS(2) = I; EXIT
                    END IF
                    S5PARTNOUTFALLS = S5PARTNOUTFALLS + 1
                END DO
            ELSE IF(TRIM(LINE) .EQ. '[CONDUITS]') THEN
                ICONDUITS(1) = I
                DO
                    I = I + 1
                    READ(S5UNITPART, '(A)') LINE
                    IF(LINE(:2) .EQ. ';;') CYCLE
                    IF(TRIM(LINE) .EQ. '') THEN
                        ICONDUITS(2) = I; EXIT
                    END IF
                    S5PARTNCONDUITS = S5PARTNCONDUITS + 1
                END DO
            END IF
        END DO
        S5PARTNNODES = S5PARTNJUNCTIONS + S5PARTNOUTFALLS
        S5PARTNLINKS = S5PARTNCONDUITS
        ALLOCATE(S5PARTNODEIDX(S5PARTNNODES), S5PARTLINKIDX(S5PARTNLINKS))
        S5PARTNODEIDX(:) = 0; S5PARTLINKIDX(:) = 0

        REWIND(S5UNITPART)
        KJ = 0; KO = S5PARTNJUNCTIONS; KC = 0
        DO J = 1,I
            READ(S5UNITPART, '(A)', IOSTAT = ERR) LINE
            IF(ERR .NE. 0) EXIT
            IF(LINE(:2) .EQ. ';;') CYCLE
            IF(IJUNCTIONS(1) .LT. J .AND. J .LT. IJUNCTIONS(2)) THEN
                BACKSPACE(S5UNITPART); KJ = KJ + 1
                READ(S5UNITPART, '(A16, A)') TCHAR16, LINE
                DO K = 1,S5NJUNCTIONS
                    IF(ADJUSTL(TRIM(TCHAR16)) .EQ. ADJUSTL(TRIM(S5NODE(K)%INPNODENAME))) THEN
                        S5PARTNODEIDX(KJ) = K
#ifdef MPP_LAND
                        S5ALLNODECPUIDX(K) = MY_ID
#endif
                    END IF
                END DO
            ELSE IF(IOUTFALLS(1) .LT. J .AND. J .LT. IOUTFALLS(2)) THEN
                BACKSPACE(S5UNITPART); KO = KO + 1
                READ(S5UNITPART, '(A16, A)') TCHAR16, LINE
                DO K = S5NJUNCTIONS+1,S5NJUNCTIONS+S5NOUTFALLS
                    IF(ADJUSTL(TRIM(TCHAR16)) .EQ. ADJUSTL(TRIM(S5NODE(K)%INPNODENAME))) THEN
                        S5PARTNODEIDX(KO) = K
#ifdef MPP_LAND
                        S5ALLNODECPUIDX(K) = MY_ID
#endif
                    END IF
                END DO
            ELSE IF(ICONDUITS(1) .LT. J .AND. J .LT. ICONDUITS(2)) THEN
                BACKSPACE(S5UNITPART); KC = KC + 1
                READ(S5UNITPART, '(A16, A)') TCHAR16, LINE
                DO K = 1,S5NLINKS
                    IF(ADJUSTL(TRIM(TCHAR16)) .EQ. ADJUSTL(TRIM(S5LINK(K)%INPLINKNAME))) THEN
                        S5PARTLINKIDX(KC) = K
#ifdef MPP_LAND
                        S5ALLLINKCPUIDX(K) = MY_ID
#endif
                    END IF
                END DO
            END IF
        END DO
        CLOSE(S5UNITPART)

        ALLOCATE(S5PARTOFLLINKIDX(S5PARTNLINKS))
        S5PARTOFLLINKIDX(:) = 0
		ALLOCATE(TCHAR(20))
		TCHAR(:) = ''
        K = 1
        DO I = 1,S5PARTNLINKS
			!IF(S5LINK(S5PARTLINKIDX(I))%INPXCULV .EQ. 0) THEN
				IF(TRIM(S5NODE(S5LINK(S5PARTLINKIDX(I))%INPCNODEIDX2)%INPOTYPE) .EQ. 'TIMESERIES') THEN
					NTCHAR = INT(1 + (K - 1) / 10)
					TCHAR(NTCHAR) = ADJUSTL(TRIM(TCHAR(NTCHAR)))//' '//ADJUSTL(TRIM(S5LINK(S5PARTLINKIDX(I))%INPLINKNAME))
					TCHAR(NTCHAR) = ADJUSTL(TRIM(TCHAR(NTCHAR)))
					S5PARTOFLLINKIDX(K) = I
					K = K + 1
				END IF
			!END IF
        END DO

        INQUIRE(FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.LOG', EXIST = OKLOG)
        IF(OKLOG) THEN
            OPEN(UNIT = S5UNITTMP, FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.LOG', FORM = 'FORMATTED', ACTION = 'WRITE', ACCESS = 'SEQUENTIAL', STATUS = 'OLD', POSITION = 'APPEND', IOSTAT = ERR)
        ELSE
            OPEN(UNIT = S5UNITTMP, FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.LOG', FORM = 'FORMATTED', ACTION = 'WRITE', ACCESS = 'SEQUENTIAL', STATUS = 'NEW', IOSTAT = ERR)
        END IF
        CLOSE(S5UNITTMP)
#ifdef MPP_LAND
        END IF
        TALLNODECPUIDX(:) = 0; TALLLINKCPUIDX(:) = 0
        CALL MPI_ALLREDUCE(S5ALLNODECPUIDX(:), TALLNODECPUIDX(:), S5NNODES, MPI_INTEGER, MPI_SUM, HYDRO_COMM_WORLD, ERR)
        CALL MPI_ALLREDUCE(S5ALLLINKCPUIDX(:), TALLLINKCPUIDX(:), S5NLINKS, MPI_INTEGER, MPI_SUM, HYDRO_COMM_WORLD, ERR)
        S5ALLNODECPUIDX(:) = TALLNODECPUIDX(:); S5ALLLINKCPUIDX(:) = TALLLINKCPUIDX(:)
#endif
    END SUBROUTINE PARTITION_CPLSWMM5_YSON

    SUBROUTINE MATCH_NODES_YSON(IXRT, JXRT, ITOPO, IWRFHDTRT)
        IMPLICIT NONE
        INTEGER, INTENT(IN) :: IXRT, JXRT
        REAL(KIND = 4), INTENT(IN), DIMENSION(IXRT, JXRT) :: ITOPO
        REAL(KIND = 4), INTENT(IN) :: IWRFHDTRT

        INTEGER, DIMENSION(NUMPROCS) :: TGATHERID, TGATHERIDXX, TGATHERIDXY, TGATHERIXRT, TGATHERJXRT
        INTEGER :: NCID, NCVARID, NCSTATUS, ERR, I, J, K, L
        CHARACTER(LEN = 10) :: TCHAR10
        
        IF(S5INITFLAG .NE. 1) RETURN
        IF(S5MATCHFLAG .EQ. 1) RETURN

		NCSTATUS = NF90_OPEN('./'//TRIM(S5DIR)//'/'//TRIM(S5FLNM)//'.nc', NF90_NOWRITE, NCID)
        NCSTATUS = NF90_INQ_VARID(NCID, 'ELEVOFFSET', NCVARID)
        IF(NCSTATUS .EQ. NF90_NOERR) NCSTATUS = NF90_GET_VAR(NCID, NCVARID, S5ELEVOFFSET)
        NCSTATUS = NF90_INQ_VARID(NCID, 'N_NODELAYER', NCVARID)
        IF(NCSTATUS .EQ. NF90_NOERR) NCSTATUS = NF90_GET_VAR(NCID, NCVARID, S5NNODELAYER)
        
        ALLOCATE(S5NODEMASK(IXRT, JXRT, S5NNODELAYER), S5NODEINDEX(IXRT, JXRT, S5NNODELAYER))
        ALLOCATE(S5OSTAGETS(S5NOUTFALLS, 1 + NINT(S5TIMELENGTH / IWRFHDTRT)))
        
        IF(S5NNODELAYER .EQ. 1) THEN
            CALL NREADRT2D_INT('NODEMASK', S5NODEMASK(:, :, 1), IXRT, JXRT, './'//TRIM(S5DIR)//'/'//TRIM(S5FLNM)//'.nc')
		    CALL NREADRT2D_INT('NODEINDEX', S5NODEINDEX(:, :, 1), IXRT, JXRT, './'//TRIM(S5DIR)//'/'//TRIM(S5FLNM)//'.nc')
        ELSE IF(S5NNODELAYER .GT. 1) THEN
            DO K = 1,S5NNODELAYER
                WRITE(TCHAR10, '(I0)') K
                CALL NREADRT2D_INT('NODEMASK'//ADJUSTL(TRIM(TCHAR10)), S5NODEMASK(:, :, K), IXRT, JXRT, './'//TRIM(S5DIR)//'/'//TRIM(S5FLNM)//'.nc')
		        CALL NREADRT2D_INT('NODEINDEX'//ADJUSTL(TRIM(TCHAR10)), S5NODEINDEX(:, :, K), IXRT, JXRT, './'//TRIM(S5DIR)//'/'//TRIM(S5FLNM)//'.nc')
            END DO
        END IF

        DO I = 1,IXRT
            DO J = 1,JXRT
                DO K = 1,S5NNODELAYER
                    IF(S5NODEMASK(I, J, K) .EQ. 1) THEN
                        S5NODE(S5NODEINDEX(I, J, K))%NWRFHID = 1
#ifdef MPP_LAND
                        S5NODE(S5NODEINDEX(I, J, K))%WRFHID(1) = MY_ID
#endif
                        S5NODE(S5NODEINDEX(I, J, K))%WRFHIDXX(1) = I
                        S5NODE(S5NODEINDEX(I, J, K))%WRFHIDXY(1) = J
                        IF(S5NODEINDEX(I, J, K) .LE. S5NJUNCTIONS) S5NODE(S5NODEINDEX(I, J, K))%INPJMAXD = AMAX1(S5ELEVOFFSET + ITOPO(I, J) - S5NODE(S5NODEINDEX(I, J, K))%INPJELEV, 0.0)
                        !IF(S5NODEINDEX(I, J, K) .LE. S5NJUNCTIONS .AND. S5NODE(S5NODEINDEX(I, J, K))%INPJMAXD .GT. 0.0) S5NODE(S5NODEINDEX(I, J, K))%INPJMAXD = AMAX1(S5ELEVOFFSET + ITOPO(I, J) - S5NODE(S5NODEINDEX(I, J, K))%INPJELEV, 0.0)
                        !PRINT *, 'NODE:', S5NODEINDEX(I, J, K), ', NAME:', S5NODE(S5NODEINDEX(I, J, K))%INPNODENAME, ', LAYER:', K, ', CPU:', S5NODE(S5NODEINDEX(I, J, K))%WRFHID(1), ', IMAX:', IXRT, ', JMAX:', JXRT, ', I:', S5NODE(S5NODEINDEX(I, J, K))%WRFHIDXX(1), ', J:', S5NODE(S5NODEINDEX(I, J, K))%WRFHIDXY(1), ', JELEV:', S5NODE(S5NODEINDEX(I, J, K))%INPJELEV, ', JDEPTH:', S5NODE(S5NODEINDEX(I, J, K))%INPJMAXD, ', OELEV:', S5NODE(S5NODEINDEX(I, J, K))%INPOELEV
                    END IF
                END DO
            END DO
        END DO

#ifdef MPP_LAND
        CALL MPI_GATHER(IXRT, 1, MPI_INTEGER, TGATHERIXRT, 1, MPI_INTEGER, IO_ID, HYDRO_COMM_WORLD, ERR)
        CALL MPI_GATHER(JXRT, 1, MPI_INTEGER, TGATHERJXRT, 1, MPI_INTEGER, IO_ID, HYDRO_COMM_WORLD, ERR)
        DO I = 1,S5NNODES
            TGATHERID(:) = -1; TGATHERIDXX(:) = 0; TGATHERIDXY(:) = 0
            CALL MPI_GATHER(S5NODE(I)%WRFHID(1), 1, MPI_INTEGER, TGATHERID, 1, MPI_INTEGER, IO_ID, HYDRO_COMM_WORLD, ERR)
            CALL MPI_GATHER(S5NODE(I)%WRFHIDXX(1), 1, MPI_INTEGER, TGATHERIDXX, 1, MPI_INTEGER, IO_ID, HYDRO_COMM_WORLD, ERR)
            CALL MPI_GATHER(S5NODE(I)%WRFHIDXY(1), 1, MPI_INTEGER, TGATHERIDXY, 1, MPI_INTEGER, IO_ID, HYDRO_COMM_WORLD, ERR)
            IF(MY_ID .EQ. IO_ID) THEN
                !PRINT *, I, ':', (TGATHERID(J), J = 1,NUMPROCS)
                K = 0; L = 1
                DO J = 1,NUMPROCS
                    IF(TGATHERID(J) .GT. -1) THEN
                        K = K + 1
                        IF(TGATHERIDXX(J) .GT. 1 .AND. TGATHERIDXX(J) .LT. TGATHERIXRT(J) .AND. TGATHERIDXY(J) .GT. 1 .AND. TGATHERIDXY(J) .LT. TGATHERJXRT(J)) THEN
                            S5NODE(I)%WRFHID(1) = TGATHERID(J); S5NODE(I)%WRFHIDXX(1) = TGATHERIDXX(J); S5NODE(I)%WRFHIDXY(1) = TGATHERIDXY(J)
                        ELSE
                            L = L + 1
                            S5NODE(I)%WRFHID(L) = TGATHERID(J); S5NODE(I)%WRFHIDXX(L) = TGATHERIDXX(J); S5NODE(I)%WRFHIDXY(L) = TGATHERIDXY(J)
                        END IF
                    END IF
                END DO
                S5NODE(I)%NWRFHID = K
            END IF
            CALL MPI_BCAST(S5NODE(I)%NWRFHID, 1, MPI_INTEGER, IO_ID, HYDRO_COMM_WORLD, ERR)
            CALL MPI_BCAST(S5NODE(I)%WRFHID, 4, MPI_INTEGER, IO_ID, HYDRO_COMM_WORLD, ERR)
            CALL MPI_BCAST(S5NODE(I)%WRFHIDXX, 4, MPI_INTEGER, IO_ID, HYDRO_COMM_WORLD, ERR)
            CALL MPI_BCAST(S5NODE(I)%WRFHIDXY, 4, MPI_INTEGER, IO_ID, HYDRO_COMM_WORLD, ERR)
            CALL MPI_BCAST(S5NODE(I)%INPJMAXD, 1, MPI_FLOAT, S5NODE(I)%WRFHID(1), HYDRO_COMM_WORLD, ERR)
            !DO J = 1,S5NODE(I)%NWRFHID
            !    IF(MY_ID .EQ. S5NODE(I)%WRFHID(J)) PRINT *, 'NODE:', I, ', NAME:', S5NODE(I)%INPNODENAME, ', CPU:', J, '-', S5NODE(I)%WRFHID(J), ', IMAX:', IXRT, ', JMAX:', JXRT, ', I:', S5NODE(I)%WRFHIDXX(J), ', J:', S5NODE(I)%WRFHIDXY(J), ', ITOPO', ITOPO(S5NODE(I)%WRFHIDXX(J), S5NODE(I)%WRFHIDXY(J)), ', JELEV:', S5NODE(I)%INPJELEV, ', JDEPTH:', S5NODE(I)%INPJMAXD, ', OELEV:', S5NODE(I)%INPOELEV
            !END DO
        END DO
#endif
        S5MATCHFLAG = 1
    END SUBROUTINE MATCH_NODES_YSON

    SUBROUTINE CHECK_WRFHHEAD_YSON(IWRFHKRT, IXRT, JXRT, ITOPO, IRETD, IOHEAD)
        IMPLICIT NONE
        INTEGER, INTENT(IN) :: IWRFHKRT, IXRT, JXRT
        REAL(KIND = 4), INTENT(IN), DIMENSION(IXRT, JXRT) :: ITOPO, IRETD
        REAL(KIND = 4), INTENT(INOUT), DIMENSION(IXRT, JXRT) :: IOHEAD

        REAL(KIND = 4), ALLOCATABLE, DIMENSION(:,:) :: TOSTAGETS
        INTEGER :: ERR, I
        
        IF(S5MATCHFLAG .NE. 1) RETURN

        IF(MOD(IWRFHKRT - 1, SIZE(S5OSTAGETS, 2) - 1) .EQ. 0) S5OSTAGETS(:,:) = 0.0
        DO I = 1,S5NNODES
#ifdef MPP_LAND
            IF(MY_ID .EQ. S5NODE(I)%WRFHID(1)) THEN
#endif
            IF(IOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) .LE. 0.0) IOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) = AMAX1(IRETD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)), 0.0)
            IF(TRIM(S5NODE(I)%INPOTYPE) .EQ. 'TIMESERIES') THEN
                IF(IOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) .GT. IRETD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1))) THEN
                    S5OSTAGETS(I - S5NJUNCTIONS, 2 + MOD(IWRFHKRT - 1, SIZE(S5OSTAGETS, 2) - 1)) = S5ELEVOFFSET + ITOPO(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) + IOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) / 1000.0
                ELSE
                    S5OSTAGETS(I - S5NJUNCTIONS, 2 + MOD(IWRFHKRT - 1, SIZE(S5OSTAGETS, 2) - 1)) = AMIN1(S5ELEVOFFSET + ITOPO(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) + IOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) / 1000.0, S5NODE(I)%INPOELEV)
                END IF
				IF(MOD(IWRFHKRT - 1, SIZE(S5OSTAGETS, 2) - 1) .EQ. 0) S5OSTAGETS(I - S5NJUNCTIONS, 1) = S5OSTAGETS(I - S5NJUNCTIONS, 2)
            END IF
#ifdef MPP_LAND
            END IF
#endif
        END DO
#ifdef MPP_LAND
        IF(2 + MOD(IWRFHKRT - 1, SIZE(S5OSTAGETS, 2) - 1) .EQ. SIZE(S5OSTAGETS, 2)) THEN
            ALLOCATE(TOSTAGETS(SIZE(S5OSTAGETS, 1), SIZE(S5OSTAGETS, 2)))
            TOSTAGETS(:,:) = 0.0
            CALL MPI_ALLREDUCE(S5OSTAGETS(:,:), TOSTAGETS(:,:), SIZE(S5OSTAGETS), MPI_REAL, MPI_SUM, HYDRO_COMM_WORLD, ERR)
            S5OSTAGETS(:,:) = TOSTAGETS(:,:)
            DEALLOCATE(TOSTAGETS)
        END IF
#endif
    END SUBROUTINE CHECK_WRFHHEAD_YSON

    SUBROUTINE UPDATE_CPLSWMM5_YSON(IXRT, JXRT, ITOPO, IRETD, IOHEAD)
        IMPLICIT NONE
        INTEGER, INTENT(IN) :: IXRT, JXRT
        REAL(KIND = 4), INTENT(IN), DIMENSION(IXRT, JXRT) :: ITOPO, IRETD
        REAL(KIND = 4), INTENT(INOUT), DIMENSION(IXRT, JXRT) :: IOHEAD
        
        REAL(KIND = 4), ALLOCATABLE, DIMENSION(:) :: TOUTFLOWS
        REAL(KIND = 4), DIMENSION(IXRT, JXRT) :: TIOHEAD
        REAL(KIND = C_INT), DIMENSION(S5NNODES) :: THSFDEPTH
        LOGICAL :: OKRPT
        INTEGER :: ERR, I, J, K
        CHARACTER(LEN = 16) :: TCHAR16
        CHARACTER(LEN = 100) :: LINE

        IF(S5MATCHFLAG .NE. 1) RETURN

#ifdef MPP_LAND
        CALL MPI_BARRIER(HYDRO_COMM_WORLD, ERR)
#endif
        TIOHEAD(:,:) = IOHEAD(:,:)
        DO I = 1,S5NNODES
            THSFDEPTH(I) = S5NODE(I)%HSFDEPTH
        END DO
        CALL READ_SWMM5HSF_YSON()
        IF(S5RUNFLAG .EQ. 0) THEN
#ifdef MPP_LAND
            IF(S5PARTRUNCPU) THEN
#endif            
            INQUIRE(FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.RPT', EXIST = OKRPT)
            IF(OKRPT) THEN
                OPEN(UNIT = S5UNITRPT, FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.RPT', FORM = 'FORMATTED', ACTION = 'READ', ACCESS = 'SEQUENTIAL', STATUS = 'OLD', IOSTAT = ERR)
                ALLOCATE(TOUTFLOWS(1 + INT(S5TIMELENGTH / S5TIMESTEP)))
                TOUTFLOWS(:) = 0.0
                I = 1
                DO
                    READ(S5UNITRPT, '(A)', IOSTAT = ERR) LINE
                    IF(ERR .NE. 0) EXIT
                    IF(ADJUSTL(TRIM(LINE)) .EQ. '<<< Link '//ADJUSTL(TRIM(S5LINK(S5PARTLINKIDX(S5PARTOFLLINKIDX(I)))%INPLINKNAME))//' >>>') THEN
                        IF(S5PARTOFLLINKIDX(I) .GT. 0) THEN
                            READ(S5UNITRPT, '(A)') LINE
                            READ(S5UNITRPT, '(A)') LINE
                            READ(S5UNITRPT, '(A)') LINE
                            READ(S5UNITRPT, '(A)') LINE
                            DO J = 1,INT(S5TIMELENGTH / S5TIMESTEP)
                                READ(S5UNITRPT, '(A24, F10.3, A10, A10, A10)') LINE, TOUTFLOWS(1 + J), LINE, LINE, LINE
                            END DO
                            !TOUTFLOWS(1) = 0.0
                            !S5NODE(S5LINK(S5PARTLINKIDX(S5PARTOFLLINKIDX(I)))%INPCNODEIDX2)%OUTFLOWS = SUM(TOUTFLOWS(:)) / (S5TIMELENGTH / S5TIMESTEP)
                            TOUTFLOWS(1) = TOUTFLOWS(2)
                            S5NODE(S5LINK(S5PARTLINKIDX(S5PARTOFLLINKIDX(I)))%INPCNODEIDX2)%OUTFLOWS = INTEGRATE((/(REAL(K, KIND = 4), K = 0, INT(S5TIMELENGTH / S5TIMESTEP))/), TOUTFLOWS(:)) / (S5TIMELENGTH / S5TIMESTEP)
                            I = I + 1
                        END IF
                    END IF
                END DO
                DEALLOCATE(TOUTFLOWS)
                CLOSE(S5UNITRPT)
            END IF
#ifdef MPP_LAND
            END IF
#endif

            DO I = 1,S5NNODES
#ifdef MPP_LAND
                IF(MY_ID .EQ. S5NODE(I)%WRFHID(1)) THEN
#endif
                S5NODE(I)%WRFHHEAD = IOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1))
#ifdef MPP_LAND
                END IF
                CALL MPI_BCAST(S5NODE(I)%WRFHHEAD, 1, MPI_REAL, S5NODE(I)%WRFHID(1), HYDRO_COMM_WORLD, ERR)
#endif
            END DO
        END IF

        DO I = 1,S5NJUNCTIONS
#ifdef MPP_LAND
            IF(MY_ID .EQ. S5NODE(I)%WRFHID(1)) THEN
#endif
            IF(S5NODE(I)%INPJSURD .EQ. 0.0 .AND. S5NODE(I)%INPJPONDA .GT. 0.0) THEN
                ! OPTION 3. BASED ON WRF-HYDRO: WRF-HYDRO HEAD +- SWMM5 HSFDEPTH COUPLING (TIME-STEP DIFFERENCE) & IMPOSING HEADS OF NON-SURCHARGING CONDITIONS FOR SWMM5
                IOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) = AMAX1(IOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) + (AMAX1(S5NODE(I)%HSFDEPTH, S5NODE(I)%INPJMAXD / S5FT2M) - AMAX1(THSFDEPTH(I), S5NODE(I)%INPJMAXD / S5FT2M)) * S5FT2M * 1000.0, IRETD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)))
            END IF
#ifdef MPP_LAND
            END IF
#endif
        END DO
        DO I = S5NJUNCTIONS+1,S5NJUNCTIONS+S5NOUTFALLS
#ifdef MPP_LAND
            IF(MY_ID .EQ. S5NODE(I)%WRFHID(1)) THEN
#endif
            ! OPTION 3. BASED ON WRF-HYDRO: WRF-HYDRO HEAD +- SWMM5 HSFDEPTH COUPLING (TIME-STEP DIFFERENCE) & IMPOSING HEADS OF NON-SURCHARGING CONDITIONS FOR SWMM5
            IF(S5NODE(I)%OUTFLOWS .NE. 0.0) THEN
                IOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) = AMAX1(IOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) + S5NODE(I)%OUTFLOWS * S5TIMELENGTH / S5NODE(I)%INPJPONDA * 1000.0, IRETD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)))
            !ELSE
                !IOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) = AMAX1(IOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) + (S5NODE(I)%HSFDEPTH - THSFDEPTH(I)) * S5FT2M * 1000.0, IRETD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)))
                !IOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) = AMAX1((S5NODE(I)%INPOELEV + S5NODE(I)%HSFDEPTH * S5FT2M - (S5ELEVOFFSET + ITOPO(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)))) * 1000.0, IRETD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)))
            END IF
#ifdef MPP_LAND
            END IF
#endif
        END DO
        DO I = 1,S5NJUNCTIONS
#ifdef MPP_LAND
            IF(MY_ID .EQ. S5NODE(I)%WRFHID(1)) THEN
#endif
            IF(S5NODE(I)%INPJSURD .EQ. 0.0 .AND. S5NODE(I)%INPJPONDA .GT. 0.0) THEN
                ! OPTION 3. BASED ON WRF-HYDRO: WRF-HYDRO HEAD +- SWMM5 HSFDEPTH COUPLING (TIME-STEP DIFFERENCE) & IMPOSING HEADS OF NON-SURCHARGING CONDITIONS FOR SWMM5
                IF(TIOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) .GT. IRETD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1))) THEN
                    IF(S5ELEVOFFSET + ITOPO(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) + TIOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) / 1000.0 - S5NODE(I)%INPJELEV .GE. S5NODE(I)%INPJMAXD) THEN
                        S5NODE(I)%HSFDEPTH = (S5ELEVOFFSET + ITOPO(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) + TIOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) / 1000.0 - S5NODE(I)%INPJELEV) / S5FT2M
                    ELSE
                        S5NODE(I)%HSFDEPTH = AMIN1(S5NODE(I)%HSFDEPTH, S5NODE(I)%INPJMAXD / S5FT2M)
                    END IF
                ELSE
                    S5NODE(I)%HSFDEPTH = AMIN1(S5NODE(I)%HSFDEPTH, AMAX1(S5ELEVOFFSET + ITOPO(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) - S5NODE(I)%INPJELEV, S5NODE(I)%INPJMAXD) / S5FT2M)
                END IF
                S5NODE(I)%INPINFLOWS = 0.0
            END IF
            S5NODE(I)%WRFHHEAD = IOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1))
#ifdef MPP_LAND
            END IF
            CALL MPI_BCAST(S5NODE(I)%HSFDEPTH, 1, MPI_FLOAT, S5NODE(I)%WRFHID(1), HYDRO_COMM_WORLD, ERR)
            CALL MPI_BCAST(S5NODE(I)%INPINFLOWS, 1, MPI_FLOAT, S5NODE(I)%WRFHID(1), HYDRO_COMM_WORLD, ERR)
            CALL MPI_BCAST(S5NODE(I)%WRFHHEAD, 1, MPI_REAL, S5NODE(I)%WRFHID(1), HYDRO_COMM_WORLD, ERR)
            DO J = 2,S5NODE(I)%NWRFHID
                IF(MY_ID .EQ. S5NODE(I)%WRFHID(J)) IOHEAD(S5NODE(I)%WRFHIDXX(J), S5NODE(I)%WRFHIDXY(J)) = S5NODE(I)%WRFHHEAD
            END DO
#endif
        END DO
        DO I = S5NJUNCTIONS+1,S5NJUNCTIONS+S5NOUTFALLS
#ifdef MPP_LAND
            IF(MY_ID .EQ. S5NODE(I)%WRFHID(1)) THEN
#endif
            ! OPTION 3. BASED ON WRF-HYDRO: WRF-HYDRO HEAD +- SWMM5 HSFDEPTH COUPLING (TIME-STEP DIFFERENCE) & IMPOSING HEADS OF NON-SURCHARGING CONDITIONS FOR SWMM5
            IF(TIOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) .GT. IRETD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1))) THEN
                S5NODE(I)%HSFDEPTH = AMAX1(S5ELEVOFFSET + ITOPO(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) + TIOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) / 1000.0 - S5NODE(I)%INPOELEV, 0.0) / S5FT2M
            ELSE
                S5NODE(I)%HSFDEPTH = AMIN1(S5NODE(I)%HSFDEPTH, AMAX1(S5ELEVOFFSET + ITOPO(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) - S5NODE(I)%INPOELEV, 0.0) / S5FT2M)
            END IF
            S5NODE(I)%INPINFLOWS = 0.0
            S5NODE(I)%WRFHHEAD = IOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1))
            IF(TIOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) .GT. IRETD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1))) THEN
                WRITE(TCHAR16, '(F16.5)') S5ELEVOFFSET + ITOPO(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) + TIOHEAD(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)) / 1000.0
            ELSE
                WRITE(TCHAR16, '(F16.5)') AMIN1(S5ELEVOFFSET + ITOPO(S5NODE(I)%WRFHIDXX(1), S5NODE(I)%WRFHIDXY(1)), S5NODE(I)%INPOELEV)
            END IF
            S5NODE(I)%INPOSTAGE = ADJUSTL(TRIM(TCHAR16))
#ifdef MPP_LAND
            END IF
            CALL MPI_BCAST(S5NODE(I)%HSFDEPTH, 1, MPI_FLOAT, S5NODE(I)%WRFHID(1), HYDRO_COMM_WORLD, ERR)
            CALL MPI_BCAST(S5NODE(I)%INPINFLOWS, 1, MPI_FLOAT, S5NODE(I)%WRFHID(1), HYDRO_COMM_WORLD, ERR)
            CALL MPI_BCAST(S5NODE(I)%WRFHHEAD, 1, MPI_REAL, S5NODE(I)%WRFHID(1), HYDRO_COMM_WORLD, ERR)
            CALL MPI_BCAST(S5NODE(I)%INPOSTAGE, LEN(S5NODE(I)%INPOSTAGE), MPI_CHAR, S5NODE(I)%WRFHID(1), HYDRO_COMM_WORLD, ERR)
            DO J = 2,S5NODE(I)%NWRFHID
                IF(MY_ID .EQ. S5NODE(I)%WRFHID(J)) IOHEAD(S5NODE(I)%WRFHIDXX(J), S5NODE(I)%WRFHIDXY(J)) = S5NODE(I)%WRFHHEAD
            END DO
#endif
        END DO
!#ifdef MPP_LAND
!        CALL MPI_BARRIER(HYDRO_COMM_WORLD, ERR)
!#endif
        CALL WRITE_SWMM5HSF_YSON()
        CALL MODIFY_SWMM5INP_YSON()
    END SUBROUTINE UPDATE_CPLSWMM5_YSON

    SUBROUTINE RUN_SWMM5_YSON()
        IMPLICIT NONE
        CHARACTER(LEN = 200) :: EXECCMD
        INTEGER :: ERR, I, J, K
        INTEGER :: FLAGERROR = 0, FLAGSTABILITY = 0, FLAGCONTINUITY = 0
        REAL(KIND = 4), ALLOCATABLE, DIMENSION(:) :: TOUTFLOWS
        CHARACTER(LEN = 100) :: LINE
        CHARACTER(LEN = 10) :: TCHAR10
        
        IF(S5INITFLAG .NE. 1) RETURN
#ifdef MPP_LAND
        IF(S5PARTRUNCPU) THEN
#endif
        OPEN(UNIT = S5UNITTMP, FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.LOG', FORM = 'FORMATTED', ACTION = 'WRITE',  ACCESS = 'SEQUENTIAL', STATUS = 'OLD', POSITION = 'APPEND', IOSTAT = ERR)
        IF(ERR .NE. 0) STOP 'PLEASE CHECK IF .LOG EXISTS'

		!EXECCMD = './'//TRIM(S5PARTDIR)//'/runswmm5 ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.INP ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.RPT ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.OUT > ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.LOGTEMP'
        EXECCMD = './'//TRIM(S5PARTDIR)//'/runswmm5 ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.INP ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.RPT > ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.LOGTEMP'
#ifdef MPP_LAND
        !WRITE(TCHAR10, '(I3)') MIN0(NUMPROCS, 24)
		!EXECCMD = 'OMP_PROC_BIND=close OMP_PLACES=threads OMP_NUM_THREADS='//ADJUSTL(TRIM(TCHAR10))//' '//TRIM(EXECCMD)
		!EXECCMD = 'OMP_PROC_BIND=close OMP_PLACES=threads '//TRIM(EXECCMD)
#endif
        CALL SYSTEM(TRIM(EXECCMD))

        FLAGERROR = 0; FLAGSTABILITY = 0; FLAGCONTINUITY = 0
        OPEN(UNIT = S5UNITRPT, FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.RPT', FORM = 'FORMATTED', ACTION = 'READ', ACCESS = 'SEQUENTIAL', STATUS = 'OLD', IOSTAT = ERR)
        IF(ERR .NE. 0) STOP 'PLEASE CHECK IF .RPT EXISTS'
        ALLOCATE(TOUTFLOWS(1 + INT(S5TIMELENGTH / S5TIMESTEP)))
        TOUTFLOWS(:) = 0.0
        I = 1
        DO
            READ(S5UNITRPT, '(A)', IOSTAT = ERR) LINE
            IF(ERR .NE. 0) EXIT
            IF(INDEX(LINE(:12), 'ERROR') .GT. 0) THEN
                WRITE(S5UNITTMP, '(A19, I8, A)') S5DATE2, S5COUNT + 1, TRIM(LINE)
                FLAGERROR = 1
            ELSE IF(ADJUSTL(TRIM(LINE)) .EQ. 'Highest Continuity Errors') THEN
                READ(S5UNITRPT, '(A)') LINE
                DO
                    READ(S5UNITRPT, '(A)') LINE
                    IF(TRIM(LINE) .EQ. '') EXIT
                    WRITE(S5UNITTMP, '(A19, I8, A)') S5DATE2, S5COUNT + 1, TRIM(LINE)
                    FLAGCONTINUITY = 1
                END DO
            ELSE IF(ADJUSTL(TRIM(LINE)) .EQ. 'Highest Flow Instability Indexes') THEN
                READ(S5UNITRPT, '(A)') LINE
                DO
                    READ(S5UNITRPT, '(A)') LINE
                    IF(TRIM(LINE) .EQ. '') EXIT
                    IF(INDEX(LINE, 'stable') .GT. 0) EXIT
                    WRITE(S5UNITTMP, '(A19, I8, A)') S5DATE2, S5COUNT + 1, TRIM(LINE)
                    FLAGSTABILITY = 1
                END DO
            ELSE IF(ADJUSTL(TRIM(LINE)) .EQ. '<<< Link '//ADJUSTL(TRIM(S5LINK(S5PARTLINKIDX(S5PARTOFLLINKIDX(I)))%INPLINKNAME))//' >>>') THEN
                IF(S5PARTOFLLINKIDX(I) .GT. 0) THEN
                    READ(S5UNITRPT, '(A)') LINE
                    READ(S5UNITRPT, '(A)') LINE
                    READ(S5UNITRPT, '(A)') LINE
                    READ(S5UNITRPT, '(A)') LINE
                    DO J = 1,INT(S5TIMELENGTH / S5TIMESTEP)
                        READ(S5UNITRPT, '(A24, F10.3, A10, A10, A10)') LINE, TOUTFLOWS(1 + J), LINE, LINE, LINE
                    END DO
                    !TOUTFLOWS(1) = 0.0
                    !S5NODE(S5LINK(S5PARTLINKIDX(S5PARTOFLLINKIDX(I)))%INPCNODEIDX2)%OUTFLOWS = SUM(TOUTFLOWS(:)) / (S5TIMELENGTH / S5TIMESTEP)
                    TOUTFLOWS(1) = TOUTFLOWS(2)
                    S5NODE(S5LINK(S5PARTLINKIDX(S5PARTOFLLINKIDX(I)))%INPCNODEIDX2)%OUTFLOWS = INTEGRATE((/(REAL(K, KIND = 4), K = 0, INT(S5TIMELENGTH / S5TIMESTEP))/), TOUTFLOWS(:)) / (S5TIMELENGTH / S5TIMESTEP)
                    I = I + 1
                END IF
            END IF
            !IF(FLAGERROR .EQ. 1 .OR. FLAGCONTINUITY .EQ. 1 .OR. FLAGSTABILITY .EQ. 1) THEN
            !IF(FLAGERROR .EQ. 1) THEN
            !    WRITE(TCHAR10, '(I4.4)') S5COUNT + 1
            !    CALL SYSTEM('cp ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.INP ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.INP_'//S5DATE2(1:4)//S5DATE2(6:7)//S5DATE2(9:10)//S5DATE2(12:13)//S5DATE2(15:16)//S5DATE2(18:19)//'_'//ADJUSTL(TRIM(TCHAR10)))
            !    CALL SYSTEM('cp ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.RPT ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.RPT_'//S5DATE2(1:4)//S5DATE2(6:7)//S5DATE2(9:10)//S5DATE2(12:13)//S5DATE2(15:16)//S5DATE2(18:19)//'_'//ADJUSTL(TRIM(TCHAR10)))
            !END IF
        END DO
        DEALLOCATE(TOUTFLOWS)

        CLOSE(S5UNITTMP)
        CLOSE(S5UNITRPT)
#ifdef MPP_LAND
        END IF
#endif
        S5RUNFLAG = 1
        S5COUNT = S5COUNT + 1
    END SUBROUTINE RUN_SWMM5_YSON

    SUBROUTINE COPY_SWMM5FILES_YSON(ICHECK)
        IMPLICIT NONE
        INTEGER, INTENT(IN) :: ICHECK
        
        LOGICAL :: OKINP, OKRPT, OKOUT, OKHSFUSE, OKHSFSAVE, OKTSDAT
        INTEGER :: I
        CHARACTER(LEN = 100) :: LINE
        CHARACTER(LEN = 10) :: TCHAR10

        IF(S5RUNFLAG .NE. 1) RETURN
#ifdef MPP_LAND
        IF(.NOT. S5PARTRUNCPU) RETURN
#endif
        IF(S5OUTPUTCOUNT .LT. 0) THEN
            IF(S5OUTPUTCOUNT .GT. -24) THEN
                READ(S5DATE2(12:13), '(I2)') I
                IF(ICHECK .NE. 1 .OR. MOD(I, IABS(S5OUTPUTCOUNT)) .NE. 0) RETURN
            ELSE IF(S5OUTPUTCOUNT .EQ. -24) THEN
                IF(ICHECK .NE. 1 .OR. S5DATE2(12:13) .NE. '00') RETURN
            ELSE
                IF(ICHECK .NE. 1 .OR. S5DATE2(12:13) .NE. '00' .OR. S5DATE2(9:10) .NE. '01') RETURN
            END IF
            LINE = 'RESTART'
        ELSE IF(S5OUTPUTCOUNT .EQ. 0) THEN
            IF(S5COUNT .GT. 1) RETURN
            WRITE(TCHAR10, '(I4.4)') S5COUNT
            LINE = ADJUSTL(TRIM(TCHAR10))
        ELSE
            IF(MOD(S5COUNT - 1, S5OUTPUTCOUNT) .GT. 0) RETURN
            WRITE(TCHAR10, '(I4.4)') S5COUNT
            LINE = ADJUSTL(TRIM(TCHAR10))
        END IF
        INQUIRE(FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.INP', EXIST = OKINP)
        IF(OKINP) CALL SYSTEM('cp ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.INP ./'//TRIM(S5PARTDIR)//'/'//S5DATE2(1:4)//S5DATE2(6:7)//S5DATE2(9:10)//S5DATE2(12:13)//S5DATE2(15:16)//S5DATE2(18:19)//'_'//TRIM(LINE)//'_'//TRIM(S5FLNM)//'.INP')
        INQUIRE(FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.RPT', EXIST = OKRPT)
        IF(OKRPT) CALL SYSTEM('cp ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.RPT ./'//TRIM(S5PARTDIR)//'/'//S5DATE2(1:4)//S5DATE2(6:7)//S5DATE2(9:10)//S5DATE2(12:13)//S5DATE2(15:16)//S5DATE2(18:19)//'_'//TRIM(LINE)//'_'//TRIM(S5FLNM)//'.RPT')
		!INQUIRE(FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.OUT', EXIST = OKOUT)
        !IF(OKOUT) CALL SYSTEM('cp ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.OUT ./'//TRIM(S5PARTDIR)//'/'//S5DATE2(1:4)//S5DATE2(6:7)//S5DATE2(9:10)//S5DATE2(12:13)//S5DATE2(15:16)//S5DATE2(18:19)//'_'//TRIM(LINE)//'_'//TRIM(S5FLNM)//'.OUT')
        INQUIRE(FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.HSFUSE', EXIST = OKHSFUSE)
        IF(OKHSFUSE) CALL SYSTEM('cp ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.HSFUSE ./'//TRIM(S5PARTDIR)//'/'//S5DATE2(1:4)//S5DATE2(6:7)//S5DATE2(9:10)//S5DATE2(12:13)//S5DATE2(15:16)//S5DATE2(18:19)//'_'//TRIM(LINE)//'_'//TRIM(S5FLNM)//'.HSFUSE')
        INQUIRE(FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.HSFSAVE', EXIST = OKHSFSAVE)
        IF(OKHSFSAVE) CALL SYSTEM('cp ./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.HSFSAVE ./'//TRIM(S5PARTDIR)//'/'//S5DATE2(1:4)//S5DATE2(6:7)//S5DATE2(9:10)//S5DATE2(12:13)//S5DATE2(15:16)//S5DATE2(18:19)//'_'//TRIM(LINE)//'_'//TRIM(S5FLNM)//'.HSFSAVE')
        DO I = S5PARTNJUNCTIONS+1,S5PARTNJUNCTIONS+S5PARTNOUTFALLS
            WRITE(TCHAR10, '(I4.4)') I - S5PARTNJUNCTIONS
            INQUIRE(FILE = './'//TRIM(S5PARTDIR)//'/TSERIES_'//ADJUSTL(TRIM(TCHAR10))//'.TSDAT', EXIST = OKTSDAT)
            IF(OKTSDAT) CALL SYSTEM('cp ./'//TRIM(S5PARTDIR)//'/TSERIES_'//ADJUSTL(TRIM(TCHAR10))//'.TSDAT ./'//TRIM(S5PARTDIR)//'/'//S5DATE2(1:4)//S5DATE2(6:7)//S5DATE2(9:10)//S5DATE2(12:13)//S5DATE2(15:16)//S5DATE2(18:19)//'_'//TRIM(LINE)//'_TSERIES_'//ADJUSTL(TRIM(TCHAR10))//'.TSDAT')
        END DO
    END SUBROUTINE COPY_SWMM5FILES_YSON

    SUBROUTINE MODIFY_SWMM5INP_YSON()
        IMPLICIT NONE
        INTEGER :: FLAGHSFUSE = 0, FLAGHSFSAVE = 0
        INTEGER :: ERR, I, J, KJ, KO
        CHARACTER(LEN = 150) :: LINE
        CHARACTER(LEN = 10) :: TCHAR10_1, TCHAR10_2, TCHAR10_3, TCHAR10_4!, TCHAR10_5
        CHARACTER(LEN = 10) :: TCHAR10_J1, TCHAR10_J2, TCHAR10_J3, TCHAR10_J4, TCHAR10_J5, TCHAR10_O1, TCHAR10_O2, TCHAR10_I1

        IF(S5INITFLAG .NE. 1) RETURN
#ifdef MPP_LAND
        IF(.NOT. S5PARTRUNCPU) RETURN
#endif
        OPEN(UNIT = S5UNITINP, FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.INP', FORM = 'FORMATTED', ACTION = 'WRITE', ACCESS = 'SEQUENTIAL', STATUS = 'REPLACE', IOSTAT = ERR)
        OPEN(UNIT = S5UNITTMP, FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.INPFORM', FORM = 'FORMATTED', ACTION = 'READ', ACCESS = 'SEQUENTIAL', STATUS = 'OLD', IOSTAT = ERR)
        IF(ERR .NE. 0) STOP 'PLEASE CHECK IF .INPFORM EXISTS'
        
        WRITE(TCHAR10_1, '(I2.2)') INT(S5TIMELENGTH / 60.0)
        WRITE(TCHAR10_2, '(I2.2)') NINT(AMOD(S5TIMELENGTH, 60.0))
        WRITE(TCHAR10_3, '(I2.2)') NINT(S5TIMESTEP)
        WRITE(TCHAR10_4, '(F10.5)') S5TIMESTEP / 10.0
!#ifdef MPP_LAND
!        S5NUMPROCS = NUMPROCS
!#endif
!        WRITE(TCHAR10_5, '(I3)') S5NUMPROCS
        DO
            READ(S5UNITTMP, '(A)', IOSTAT = ERR) LINE
            IF(ERR .NE. 0) THEN
                WRITE(S5UNITINP, '(A)') TRIM(LINE)
                EXIT
            END IF

            IF(TRIM(LINE(:21)) .EQ. 'IGNORE_ROUTING') LINE(22:) = 'NO'
            IF(TRIM(LINE(:21)) .EQ. 'ALLOW_PONDING') LINE(22:) = 'YES'
            IF(TRIM(LINE(:21)) .EQ. 'SKIP_STEADY_STATE') LINE(22:) = 'NO'
            IF(TRIM(LINE(:21)) .EQ. 'START_DATE') LINE(22:) = S5DATE1(6:7)//'/'//S5DATE1(9:10)//'/'//S5DATE1(1:4)
            IF(TRIM(LINE(:21)) .EQ. 'START_TIME') LINE(22:) = S5DATE1(12:13)//':'//'00'//':'//'00'
            IF(TRIM(LINE(:21)) .EQ. 'REPORT_START_DATE') LINE(22:) = S5DATE1(6:7)//'/'//S5DATE1(9:10)//'/'//S5DATE1(1:4)
            IF(TRIM(LINE(:21)) .EQ. 'REPORT_START_TIME') LINE(22:) = S5DATE1(12:13)//':'//'00'//':'//'00'
            IF(TRIM(LINE(:21)) .EQ. 'END_DATE') LINE(22:) = S5DATE1(6:7)//'/'//S5DATE1(9:10)//'/'//S5DATE1(1:4)
            IF(TRIM(LINE(:21)) .EQ. 'END_TIME') LINE(22:) = S5DATE1(12:13)//':'//TRIM(TCHAR10_1)//':'//TRIM(TCHAR10_2)
            IF(TRIM(LINE(:21)) .EQ. 'REPORT_STEP') LINE(22:) = '00:00:'//TRIM(TCHAR10_3)
            IF(TRIM(LINE(:21)) .EQ. 'ROUTING_STEP') LINE(22:) = '00:00:'//TRIM(TCHAR10_3)
            IF(TRIM(LINE(:21)) .EQ. 'MINIMUM_STEP') LINE(22:) = ADJUSTL(TRIM(TCHAR10_4))
!#ifdef MPP_LAND
!            IF(TRIM(LINE(:21)) .EQ. 'THREADS') LINE(22:) = ADJUSTL(TRIM(TCHAR10_5))
!#endif
            IF(TRIM(LINE) .EQ. '[FILES]') THEN
                WRITE(S5UNITINP, '(A)') TRIM(LINE)
                DO
                    READ(S5UNITTMP, '(A)') LINE
                    IF(TRIM(LINE(:12)) .EQ. 'USE HOTSTART') THEN
                        LINE(14:) = '"'//'./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.HSFUSE'//'"'; FLAGHSFUSE = 1
                    ELSE IF(TRIM(LINE(:13)) .EQ. 'SAVE HOTSTART') THEN
                        LINE(15:) = '"'//'./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.HSFSAVE'//'"'; FLAGHSFSAVE = 1
                    ELSE IF(TRIM(LINE) .EQ. '') THEN
                        IF(FLAGHSFUSE .EQ. 0) WRITE(S5UNITINP, '(A)') 'USE HOTSTART "'//'./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.HSFUSE'//'"'
                        IF(FLAGHSFSAVE .EQ. 0) WRITE(S5UNITINP, '(A)') 'SAVE HOTSTART "'//'./'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.HSFSAVE'//'"'
                        EXIT
                    END IF
                    WRITE(S5UNITINP, '(A)') TRIM(LINE)
                END DO
            ELSE IF(TRIM(LINE) .EQ. '[JUNCTIONS]') THEN
                WRITE(S5UNITINP, '(A)') TRIM(LINE)
                KJ = 0
                DO
                    READ(S5UNITTMP, '(A)') LINE
                    IF(LINE(:2) .NE. ';;') THEN
                        IF(TRIM(LINE) .EQ. '') EXIT
                        KJ = KJ + 1
                        WRITE(TCHAR10_J1, '(F10.5)') S5NODE(S5PARTNODEIDX(KJ))%INPJELEV
                        WRITE(TCHAR10_J2, '(F10.5)') S5NODE(S5PARTNODEIDX(KJ))%INPJMAXD
                        WRITE(TCHAR10_J3, '(F10.5)') S5NODE(S5PARTNODEIDX(KJ))%INPJINITD
                        WRITE(TCHAR10_J4, '(F10.3)') S5NODE(S5PARTNODEIDX(KJ))%INPJSURD
                        WRITE(TCHAR10_J5, '(F10.3)') S5NODE(S5PARTNODEIDX(KJ))%INPJPONDA
                        LINE = S5NODE(S5PARTNODEIDX(KJ))%INPNODENAME//' '//ADJUSTL(TRIM(TCHAR10_J1))//' '//ADJUSTL(TRIM(TCHAR10_J2))//' '//ADJUSTL(TRIM(TCHAR10_J3))//' '//ADJUSTL(TRIM(TCHAR10_J4))//' '//ADJUSTL(TRIM(TCHAR10_J5))
                    END IF
                    WRITE(S5UNITINP, '(A)') TRIM(LINE)
                END DO
            ELSE IF(TRIM(LINE) .EQ. '[OUTFALLS]') THEN
                WRITE(S5UNITINP, '(A)') TRIM(LINE)
                KO = S5PARTNJUNCTIONS
                DO
                    READ(S5UNITTMP, '(A)') LINE
                    IF(LINE(:2) .NE. ';;') THEN
                        IF(TRIM(LINE) .EQ. '') EXIT
                        KO = KO + 1
                        WRITE(TCHAR10_O1, '(F10.5)') S5NODE(S5PARTNODEIDX(KO))%INPOELEV
                        IF(TRIM(S5NODE(S5PARTNODEIDX(KO))%INPOTYPE) .EQ. 'TIMESERIES') THEN
                            WRITE(TCHAR10_O2, '(I4.4)') KO - S5PARTNJUNCTIONS
                            LINE = S5NODE(S5PARTNODEIDX(KO))%INPNODENAME//' '//ADJUSTL(TRIM(TCHAR10_O1))//' TIMESERIES '//'TSERIES'//ADJUSTL(TRIM(TCHAR10_O2))//'      '//S5NODE(S5PARTNODEIDX(KO))%INPOGATE
                        ELSE
                            WRITE(TCHAR10_O2, '(F10.5)') S5NODE(S5PARTNODEIDX(KO))%INPOSTAGE
                            LINE = S5NODE(S5PARTNODEIDX(KO))%INPNODENAME//' '//ADJUSTL(TRIM(TCHAR10_O1))//' FIXED      '//ADJUSTL(TCHAR10_O2)//'      '//S5NODE(S5PARTNODEIDX(KO))%INPOGATE
                        END IF
                    END IF
                    WRITE(S5UNITINP, '(A)') TRIM(LINE)
                END DO
            ELSE IF(TRIM(LINE) .EQ. '[XSECTIONS]') THEN
                WRITE(S5UNITINP, '(A)') TRIM(LINE)
                DO
                    READ(S5UNITTMP, '(A)') LINE
                    IF(TRIM(LINE) .EQ. '') THEN
                        WRITE(S5UNITINP, '(A)') TRIM(LINE)
                        WRITE(S5UNITINP, '(A)') '[INFLOWS]'
                        WRITE(S5UNITINP, '(A)') ';;Node           Constituent      Time Series      Type     Mfactor  Sfactor  Baseline Pattern'
                        WRITE(S5UNITINP, '(A)') ';;-------------- ---------------- ---------------- -------- -------- -------- -------- --------'
                        DO I = 1,S5PARTNNODES
                            IF(S5NODE(S5PARTNODEIDX(I))%INPINFLOWS .GT. 0.0) THEN
                                WRITE(TCHAR10_I1, '(F8.4)') S5NODE(S5PARTNODEIDX(I))%INPINFLOWS
                                WRITE(S5UNITINP, '(A)') S5NODE(S5PARTNODEIDX(I))%INPNODENAME//' FLOW             ""               FLOW     1.0      1.0      '//ADJUSTL(TRIM(TCHAR10_I1))
                            END IF
                        END DO
                        WRITE(S5UNITINP, '(A)') TRIM(LINE)
                        WRITE(S5UNITINP, '(A)') '[TIMESERIES]'
                        WRITE(S5UNITINP, '(A)') ';;Name           Date       Time       Value     '
                        WRITE(S5UNITINP, '(A)') ';;-------------- ---------- ---------- ----------'
                        DO I = S5PARTNJUNCTIONS+1,S5PARTNJUNCTIONS+S5PARTNOUTFALLS
                            IF(TRIM(S5NODE(S5PARTNODEIDX(I))%INPOTYPE) .EQ. 'TIMESERIES') THEN
                                WRITE(TCHAR10_O2, '(I4.4)') I - S5PARTNJUNCTIONS
                                WRITE(S5UNITINP, '(A)') 'TSERIES'//ADJUSTL(TRIM(TCHAR10_O2))//'       FILE "./'//TRIM(S5PARTDIR)//'/TSERIES_'//ADJUSTL(TRIM(TCHAR10_O2))//'.TSDAT"'
                                WRITE(S5UNITINP, '(A)') ';'
                            END IF
                        END DO
                        WRITE(S5UNITINP, '(A)') TRIM(LINE)
                        WRITE(S5UNITINP, '(A)') '[REPORT]'
                        WRITE(S5UNITINP, '(A)') ';;Reporting Options'
                        WRITE(S5UNITINP, '(A)') 'INPUT NO'
                        WRITE(S5UNITINP, '(A)') 'CONTINUITY YES'
						WRITE(S5UNITINP, '(A)') 'AVERAGES NO'
                        WRITE(S5UNITINP, '(A)') 'FLOWSTATS NO'
                        WRITE(S5UNITINP, '(A)') 'CONTROLS NO'
                        WRITE(S5UNITINP, '(A)') 'SUBCATCHMENTS NONE'
                        WRITE(S5UNITINP, '(A)') 'NODES NONE'
						DO I = 1,NTCHAR
							WRITE(S5UNITINP, '(A)') 'LINKS '//ADJUSTL(TRIM(TCHAR(I)))
                        END DO
                        EXIT
                    END IF
                    WRITE(S5UNITINP, '(A)') TRIM(LINE)
                END DO
            ELSE IF(TRIM(LINE) .EQ. '[INFLOWS]') THEN
                DO
                    READ(S5UNITTMP, '(A)') LINE
                    IF(TRIM(LINE) .EQ. '') EXIT
                END DO
            ELSE IF(TRIM(LINE) .EQ. '[TIMESERIES]') THEN
                DO
                    READ(S5UNITTMP, '(A)') LINE
                    IF(TRIM(LINE) .EQ. '') EXIT
                END DO
            ELSE IF(TRIM(LINE) .EQ. '[REPORT]') THEN
                DO
                    READ(S5UNITTMP, '(A)') LINE
                    IF(TRIM(LINE) .EQ. '') EXIT
                END DO
            END IF

            WRITE(S5UNITINP, '(A)') TRIM(LINE)
        END DO

        CLOSE(S5UNITINP)
        CLOSE(S5UNITTMP)
    END SUBROUTINE MODIFY_SWMM5INP_YSON

    SUBROUTINE WRITE_SWMM5TS_YSON(IWRFHDTRT)
        IMPLICIT NONE
        REAL(KIND = 4), INTENT(IN) :: IWRFHDTRT

        INTEGER :: ERR, I, J
        CHARACTER(LEN = 10) :: TCHAR10_1, TCHAR10_2, TCHAR10_3, TCHAR10_4

        IF(S5INITFLAG .NE. 1) RETURN
#ifdef MPP_LAND
        IF(.NOT. S5PARTRUNCPU) RETURN
#endif
        DO I = S5PARTNJUNCTIONS+1,S5PARTNJUNCTIONS+S5PARTNOUTFALLS
            IF(TRIM(S5NODE(S5PARTNODEIDX(I))%INPOTYPE) .EQ. 'TIMESERIES') THEN
                WRITE(TCHAR10_1, '(I4.4)') I - S5PARTNJUNCTIONS
                OPEN(UNIT = S5UNITTS, FILE = './'//TRIM(S5PARTDIR)//'/TSERIES_'//ADJUSTL(TRIM(TCHAR10_1))//'.TSDAT', FORM = 'FORMATTED', ACTION = 'WRITE', ACCESS = 'SEQUENTIAL', STATUS = 'REPLACE', IOSTAT = ERR)
                IF(ERR .NE. 0) RETURN
                WRITE(S5UNITTS, '(A)') ';;Date     Time       Value     '
                WRITE(S5UNITTS, '(A)') ';;-------- ---------- ----------'
                DO J = 1,SIZE(S5OSTAGETS, 2),MAX0(1, CEILING(1.0/IWRFHDTRT))
                    WRITE(TCHAR10_2, '(I2.2)') INT(REAL(J-1) * IWRFHDTRT / 60.0)
                    WRITE(TCHAR10_3, '(I2.2)') NINT(AMOD(REAL(J-1) * IWRFHDTRT, 60.0))
                    WRITE(TCHAR10_4, '(F10.5)') S5OSTAGETS(S5PARTNODEIDX(I) - S5NJUNCTIONS, J)
                    WRITE(S5UNITTS, '(A)') S5DATE1(6:7)//'/'//S5DATE1(9:10)//'/'//S5DATE1(1:4)//' '//S5DATE1(12:13)//':'//TRIM(TCHAR10_2)//':'//TRIM(TCHAR10_3)//'   '//ADJUSTL(TRIM(TCHAR10_4))
                END DO
                CLOSE(S5UNITTS)
            END IF
        END DO
    END SUBROUTINE WRITE_SWMM5TS_YSON

    SUBROUTINE READ_SWMM5HSF_YSON()
        IMPLICIT NONE
        INTEGER(KIND = C_INT) :: HSFNNODES = 0, HSFNLINKS = 0
        LOGICAL :: OKHSFSAVE
        INTEGER :: ERR, I
        
        IF(S5INITFLAG .NE. 1) RETURN
#ifdef MPP_LAND
        IF(S5PARTRUNCPU) THEN
#endif
        INQUIRE(FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.HSFSAVE', EXIST = OKHSFSAVE)
        IF(OKHSFSAVE) THEN
            OPEN(UNIT = S5UNITHSF, FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.HSFSAVE', FORM = 'UNFORMATTED', CONVERT = 'LITTLE_ENDIAN', ACTION = 'READ', ACCESS = 'STREAM', STATUS = 'OLD', IOSTAT = ERR)
            READ(S5UNITHSF) S5FSTAMPX
            READ(S5UNITHSF) S5NSUBCATCH, S5NLANDUSES, HSFNNODES, HSFNLINKS, S5NPOLLUT, S5FLOWUNITS
            IF(S5PARTNNODES .NE. HSFNNODES .OR. S5PARTNLINKS .NE. HSFNLINKS) RETURN
            DO I = 1,S5PARTNNODES
                READ(S5UNITHSF) S5NODE(S5PARTNODEIDX(I))%HSFDEPTH, S5NODE(S5PARTNODEIDX(I))%HSFLATFLOW
            END DO
            DO I = 1,S5PARTNLINKS
                READ(S5UNITHSF) S5LINK(S5PARTLINKIDX(I))%HSFFLOW, S5LINK(S5PARTLINKIDX(I))%HSFDEPTH, S5LINK(S5PARTLINKIDX(I))%HSFSETTING
            END DO
            CLOSE(S5UNITHSF)
        ELSE
            !STOP 'PLEASE CHECK IF A SWMM5 HOTSTART FILE EXISTS'
            PRINT *, 'PLEASE CHECK IF A SWMM5 HOTSTART FILE EXISTS AT', S5PARTRUNCPU, S5COUNT
        END IF
#ifdef MPP_LAND
        END IF
        DO I = 1,S5NNODES
            CALL MPI_BCAST(S5NODE(I)%HSFDEPTH, 1, MPI_FLOAT, S5ALLNODECPUIDX(I), HYDRO_COMM_WORLD, ERR)
            CALL MPI_BCAST(S5NODE(I)%HSFLATFLOW, 1, MPI_FLOAT, S5ALLNODECPUIDX(I), HYDRO_COMM_WORLD, ERR)
        END DO
        DO I = 1,S5NLINKS
            CALL MPI_BCAST(S5LINK(I)%HSFFLOW, 1, MPI_FLOAT, S5ALLLINKCPUIDX(I), HYDRO_COMM_WORLD, ERR)
            CALL MPI_BCAST(S5LINK(I)%HSFDEPTH, 1, MPI_FLOAT, S5ALLLINKCPUIDX(I), HYDRO_COMM_WORLD, ERR)
            CALL MPI_BCAST(S5LINK(I)%HSFSETTING, 1, MPI_FLOAT, S5ALLLINKCPUIDX(I), HYDRO_COMM_WORLD, ERR)
        END DO
#endif
    END SUBROUTINE READ_SWMM5HSF_YSON

    SUBROUTINE WRITE_SWMM5HSF_YSON()
        IMPLICIT NONE
        INTEGER :: ERR, I
        
        IF(S5INITFLAG .NE. 1) RETURN
#ifdef MPP_LAND
        IF(.NOT. S5PARTRUNCPU) RETURN
#endif
        OPEN(UNIT = S5UNITHSF, FILE = './'//TRIM(S5PARTDIR)//'/'//TRIM(S5FLNM)//'.HSFUSE', FORM = 'UNFORMATTED', CONVERT = 'LITTLE_ENDIAN', ACTION = 'WRITE', ACCESS = 'STREAM', STATUS = 'REPLACE', IOSTAT = ERR)
        IF(ERR .NE. 0) RETURN
        
        WRITE(S5UNITHSF) S5FSTAMPX
        WRITE(S5UNITHSF) S5NSUBCATCH, S5NLANDUSES, S5PARTNNODES, S5PARTNLINKS, S5NPOLLUT, S5FLOWUNITS
        DO I = 1,S5PARTNNODES
            WRITE(S5UNITHSF) S5NODE(S5PARTNODEIDX(I))%HSFDEPTH, S5NODE(S5PARTNODEIDX(I))%HSFLATFLOW
        END DO
        DO I = 1,S5PARTNLINKS
            WRITE(S5UNITHSF) S5LINK(S5PARTLINKIDX(I))%HSFFLOW, S5LINK(S5PARTLINKIDX(I))%HSFDEPTH, S5LINK(S5PARTLINKIDX(I))%HSFSETTING
        END DO

        CLOSE(S5UNITHSF)
    END SUBROUTINE WRITE_SWMM5HSF_YSON

    SUBROUTINE END_CPLSWMM5_YSON()
		IMPLICIT NONE

		IF(S5INITFLAG .NE. 1) THEN
            DEALLOCATE(S5NODE, S5LINK)
            DEALLOCATE(S5ALLNODECPUIDX, S5ALLLINKCPUIDX)
            DEALLOCATE(S5PARTNODEIDX, S5PARTLINKIDX)
            DEALLOCATE(S5PARTOFLLINKIDX)
            DEALLOCATE(TCHAR)
        END IF
        IF(S5MATCHFLAG .NE. 1) THEN
            DEALLOCATE(S5NODEMASK, S5NODEINDEX)
            DEALLOCATE(S5OSTAGETS)
        END IF
	END SUBROUTINE END_CPLSWMM5_YSON

    ! https://fortranwiki.org/fortran/show/integration
    PURE FUNCTION INTEGRATE(X, Y) RESULT(R)
        !! Calculates the integral of an array y with respect to x using the trapezoid
        !! approximation. Note that the mesh spacing of x does not have to be uniform.
        REAL(KIND = 4), INTENT(IN) :: X(:)         !! Variable x
        REAL(KIND = 4), INTENT(IN) :: Y(SIZE(X))   !! Function y(x)
        REAL(KIND = 4) :: R                        !! Integral ∫y(x)·dx
    
        ! Integrate using the trapezoidal rule
        ASSOCIATE(N => SIZE(x))
            R = SUM((Y(1+1:N-0) + Y(1+0:N-1))*(X(1+1:N-0) - X(1+0:N-1)))/2
        END ASSOCIATE
    END FUNCTION
END MODULE MODULE_CPLSWMM5_YSON